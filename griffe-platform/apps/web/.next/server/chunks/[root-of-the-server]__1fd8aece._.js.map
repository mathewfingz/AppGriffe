{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/packages/database/index.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport * from '@prisma/client'"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,sOAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { hash } from 'bcryptjs'\nimport { z } from 'zod'\nimport { prisma } from '@griffe/database'\n\nconst registerSchema = z.object({\n  name: z.string().min(2, 'El nombre debe tener al menos 2 caracteres'),\n  email: z.string().email('Email inválido'),\n  password: z.string().min(6, 'La contraseña debe tener al menos 6 caracteres'),\n})\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { name, email, password } = registerSchema.parse(body)\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    })\n\n    if (existingUser) {\n      return NextResponse.json(\n        { message: 'El usuario ya existe' },\n        { status: 400 }\n      )\n    }\n\n    // Hash password\n    const hashedPassword = await hash(password, 12)\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n        role: 'USER',\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        createdAt: true,\n      },\n    })\n\n    return NextResponse.json(\n      { \n        message: 'Usuario creado exitosamente',\n        user,\n      },\n      { status: 201 }\n    )\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { message: 'Datos inválidos', errors: error.errors },\n        { status: 400 }\n      )\n    }\n\n    console.error('Error creating user:', error)\n    return NextResponse.json(\n      { message: 'Error interno del servidor' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AAAA;;;;;AAEA,MAAM,iBAAiB,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,eAAe,KAAK,CAAC;QAEvD,+BAA+B;QAC/B,MAAM,eAAe,MAAM,+IAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAuB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAE5C,cAAc;QACd,MAAM,OAAO,MAAM,+IAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,MAAM;YACR;YACA,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,MAAM;gBACN,WAAW;YACb;QACF;QAEA,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,sNAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAmB,QAAQ,MAAM,MAAM;YAAC,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,iSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA6B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}