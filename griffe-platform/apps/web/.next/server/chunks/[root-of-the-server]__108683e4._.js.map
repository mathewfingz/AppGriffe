{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/packages/database/index.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport * from '@prisma/client'"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/lib/jwt.ts"],"sourcesContent":["import jwt from 'jsonwebtoken'\nimport { prisma } from '@griffe/database'\nimport crypto from 'crypto'\n\nconst JWT_SECRET = process.env.NEXTAUTH_SECRET || 'fallback-secret'\nconst REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET || 'refresh-secret'\n\nexport interface JWTPayload {\n  userId: string\n  email: string\n  role: string\n  storeId?: string | null\n}\n\nexport interface RefreshTokenPayload {\n  userId: string\n  tokenId: string\n}\n\n// Generar Access Token (JWT)\nexport function generateAccessToken(payload: JWTPayload): string {\n  return jwt.sign(payload, JWT_SECRET, {\n    expiresIn: '15m', // 15 minutos\n    issuer: 'griffe-platform',\n    audience: 'griffe-users'\n  })\n}\n\n// Generar Refresh Token\nexport async function generateRefreshToken(userId: string): Promise<string> {\n  // Generar token único\n  const token = crypto.randomBytes(64).toString('hex')\n  \n  // Calcular fecha de expiración (30 días)\n  const expires = new Date()\n  expires.setDate(expires.getDate() + 30)\n\n  // Guardar en base de datos\n  const refreshToken = await prisma.refreshToken.create({\n    data: {\n      token,\n      userId,\n      expires\n    }\n  })\n\n  // Crear JWT con el ID del refresh token\n  const refreshJWT = jwt.sign(\n    { userId, tokenId: refreshToken.id } as RefreshTokenPayload,\n    REFRESH_TOKEN_SECRET,\n    {\n      expiresIn: '30d',\n      issuer: 'griffe-platform',\n      audience: 'griffe-refresh'\n    }\n  )\n\n  return refreshJWT\n}\n\n// Verificar Access Token\nexport function verifyAccessToken(token: string): JWTPayload | null {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET, {\n      issuer: 'griffe-platform',\n      audience: 'griffe-users'\n    }) as JWTPayload\n    return decoded\n  } catch (error) {\n    return null\n  }\n}\n\n// Verificar Refresh Token\nexport async function verifyRefreshToken(token: string): Promise<{ userId: string; tokenId: string } | null> {\n  try {\n    const decoded = jwt.verify(token, REFRESH_TOKEN_SECRET, {\n      issuer: 'griffe-platform',\n      audience: 'griffe-refresh'\n    }) as RefreshTokenPayload\n\n    // Verificar que el token existe en la base de datos y no ha expirado\n    const refreshToken = await prisma.refreshToken.findUnique({\n      where: { id: decoded.tokenId },\n      include: { user: true }\n    })\n\n    if (!refreshToken || refreshToken.expires < new Date()) {\n      // Token expirado o no existe, eliminarlo si existe\n      if (refreshToken) {\n        await prisma.refreshToken.delete({\n          where: { id: decoded.tokenId }\n        })\n      }\n      return null\n    }\n\n    return { userId: decoded.userId, tokenId: decoded.tokenId }\n  } catch (error) {\n    return null\n  }\n}\n\n// Renovar Access Token usando Refresh Token\nexport async function refreshAccessToken(refreshToken: string): Promise<{ accessToken: string; refreshToken: string } | null> {\n  const tokenData = await verifyRefreshToken(refreshToken)\n  \n  if (!tokenData) {\n    return null\n  }\n\n  // Obtener datos del usuario\n  const user = await prisma.user.findUnique({\n    where: { id: tokenData.userId },\n    include: { store: true }\n  })\n\n  if (!user) {\n    return null\n  }\n\n  // Generar nuevo access token\n  const newAccessToken = generateAccessToken({\n    userId: user.id,\n    email: user.email,\n    role: user.role,\n    storeId: user.storeId\n  })\n\n  // Generar nuevo refresh token (rotación de tokens)\n  await revokeRefreshToken(tokenData.tokenId)\n  const newRefreshToken = await generateRefreshToken(user.id)\n\n  return {\n    accessToken: newAccessToken,\n    refreshToken: newRefreshToken\n  }\n}\n\n// Revocar Refresh Token\nexport async function revokeRefreshToken(tokenId: string): Promise<void> {\n  try {\n    await prisma.refreshToken.delete({\n      where: { id: tokenId }\n    })\n  } catch (error) {\n    // Token ya eliminado o no existe\n  }\n}\n\n// Revocar todos los Refresh Tokens de un usuario\nexport async function revokeAllRefreshTokens(userId: string): Promise<void> {\n  await prisma.refreshToken.deleteMany({\n    where: { userId }\n  })\n}\n\n// Limpiar tokens expirados (función de mantenimiento)\nexport async function cleanupExpiredTokens(): Promise<void> {\n  const now = new Date()\n  \n  await prisma.refreshToken.deleteMany({\n    where: {\n      expires: {\n        lt: now\n      }\n    }\n  })\n\n  await prisma.passwordResetToken.deleteMany({\n    where: {\n      expires: {\n        lt: now\n      }\n    }\n  })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/lib/email.ts"],"sourcesContent":["import nodemailer from 'nodemailer'\n\n// Configuración del transportador de email\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST || 'smtp.gmail.com',\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: false, // true para 465, false para otros puertos\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASSWORD,\n  },\n})\n\nexport interface EmailOptions {\n  to: string\n  subject: string\n  html: string\n  text?: string\n}\n\n// Enviar email genérico\nexport async function sendEmail(options: EmailOptions): Promise<boolean> {\n  try {\n    if (!process.env.SMTP_USER || !process.env.SMTP_PASSWORD) {\n      console.warn('SMTP credentials not configured. Email not sent.')\n      return false\n    }\n\n    await transporter.sendMail({\n      from: `\"GRIFFE Platform\" <${process.env.SMTP_USER}>`,\n      to: options.to,\n      subject: options.subject,\n      html: options.html,\n      text: options.text,\n    })\n\n    return true\n  } catch (error) {\n    console.error('Error sending email:', error)\n    return false\n  }\n}\n\n// Template para email de recuperación de contraseña\nexport function getPasswordResetEmailTemplate(resetUrl: string, userName?: string): { html: string; text: string } {\n  const html = `\n    <!DOCTYPE html>\n    <html lang=\"es\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Recuperar Contraseña - GRIFFE</title>\n      <style>\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n        .header {\n          text-align: center;\n          padding: 20px 0;\n          border-bottom: 2px solid #f0f0f0;\n        }\n        .logo {\n          font-size: 24px;\n          font-weight: bold;\n          color: #2563eb;\n        }\n        .content {\n          padding: 30px 0;\n        }\n        .button {\n          display: inline-block;\n          padding: 12px 24px;\n          background-color: #2563eb;\n          color: white;\n          text-decoration: none;\n          border-radius: 6px;\n          font-weight: 500;\n          margin: 20px 0;\n        }\n        .footer {\n          text-align: center;\n          padding: 20px 0;\n          border-top: 1px solid #f0f0f0;\n          color: #666;\n          font-size: 14px;\n        }\n        .warning {\n          background-color: #fef3c7;\n          border: 1px solid #f59e0b;\n          border-radius: 6px;\n          padding: 15px;\n          margin: 20px 0;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <div class=\"logo\">GRIFFE</div>\n      </div>\n      \n      <div class=\"content\">\n        <h2>Recuperar Contraseña</h2>\n        \n        ${userName ? `<p>Hola ${userName},</p>` : '<p>Hola,</p>'}\n        \n        <p>Hemos recibido una solicitud para restablecer la contraseña de tu cuenta en GRIFFE Platform.</p>\n        \n        <p>Para crear una nueva contraseña, haz clic en el siguiente enlace:</p>\n        \n        <div style=\"text-align: center;\">\n          <a href=\"${resetUrl}\" class=\"button\">Restablecer Contraseña</a>\n        </div>\n        \n        <div class=\"warning\">\n          <strong>⚠️ Importante:</strong>\n          <ul>\n            <li>Este enlace expirará en 1 hora por seguridad</li>\n            <li>Si no solicitaste este cambio, puedes ignorar este email</li>\n            <li>Tu contraseña actual seguirá siendo válida hasta que la cambies</li>\n          </ul>\n        </div>\n        \n        <p>Si tienes problemas con el enlace, copia y pega la siguiente URL en tu navegador:</p>\n        <p style=\"word-break: break-all; color: #666; font-size: 14px;\">${resetUrl}</p>\n      </div>\n      \n      <div class=\"footer\">\n        <p>Este email fue enviado desde GRIFFE Platform</p>\n        <p>Si no solicitaste este cambio, contacta con nuestro soporte</p>\n      </div>\n    </body>\n    </html>\n  `\n\n  const text = `\n    GRIFFE - Recuperar Contraseña\n    \n    ${userName ? `Hola ${userName},` : 'Hola,'}\n    \n    Hemos recibido una solicitud para restablecer la contraseña de tu cuenta en GRIFFE Platform.\n    \n    Para crear una nueva contraseña, visita el siguiente enlace:\n    ${resetUrl}\n    \n    IMPORTANTE:\n    - Este enlace expirará en 1 hora por seguridad\n    - Si no solicitaste este cambio, puedes ignorar este email\n    - Tu contraseña actual seguirá siendo válida hasta que la cambies\n    \n    Si tienes problemas, contacta con nuestro soporte.\n    \n    GRIFFE Platform\n  `\n\n  return { html, text }\n}\n\n// Template para email de bienvenida\nexport function getWelcomeEmailTemplate(userName: string, loginUrl: string): { html: string; text: string } {\n  const html = `\n    <!DOCTYPE html>\n    <html lang=\"es\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Bienvenido a GRIFFE</title>\n      <style>\n        body {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n        .header {\n          text-align: center;\n          padding: 20px 0;\n          border-bottom: 2px solid #f0f0f0;\n        }\n        .logo {\n          font-size: 24px;\n          font-weight: bold;\n          color: #2563eb;\n        }\n        .content {\n          padding: 30px 0;\n        }\n        .button {\n          display: inline-block;\n          padding: 12px 24px;\n          background-color: #2563eb;\n          color: white;\n          text-decoration: none;\n          border-radius: 6px;\n          font-weight: 500;\n          margin: 20px 0;\n        }\n        .footer {\n          text-align: center;\n          padding: 20px 0;\n          border-top: 1px solid #f0f0f0;\n          color: #666;\n          font-size: 14px;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <div class=\"logo\">GRIFFE</div>\n      </div>\n      \n      <div class=\"content\">\n        <h2>¡Bienvenido a GRIFFE Platform!</h2>\n        \n        <p>Hola ${userName},</p>\n        \n        <p>¡Tu cuenta ha sido creada exitosamente! Estamos emocionados de tenerte en nuestra plataforma.</p>\n        \n        <p>Ya puedes acceder a tu dashboard y comenzar a gestionar tu tienda:</p>\n        \n        <div style=\"text-align: center;\">\n          <a href=\"${loginUrl}\" class=\"button\">Acceder a mi Dashboard</a>\n        </div>\n        \n        <p>Si tienes alguna pregunta o necesitas ayuda, no dudes en contactarnos.</p>\n        \n        <p>¡Gracias por elegir GRIFFE!</p>\n      </div>\n      \n      <div class=\"footer\">\n        <p>GRIFFE Platform - Tu socio en el comercio digital</p>\n      </div>\n    </body>\n    </html>\n  `\n\n  const text = `\n    ¡Bienvenido a GRIFFE Platform!\n    \n    Hola ${userName},\n    \n    ¡Tu cuenta ha sido creada exitosamente! Estamos emocionados de tenerte en nuestra plataforma.\n    \n    Ya puedes acceder a tu dashboard y comenzar a gestionar tu tienda:\n    ${loginUrl}\n    \n    Si tienes alguna pregunta o necesitas ayuda, no dudes en contactarnos.\n    \n    ¡Gracias por elegir GRIFFE!\n    \n    GRIFFE Platform - Tu socio en el comercio digital\n  `\n\n  return { html, text }\n}\n\n// Enviar email de recuperación de contraseña\nexport async function sendPasswordResetEmail(email: string, resetUrl: string, userName?: string): Promise<boolean> {\n  const { html, text } = getPasswordResetEmailTemplate(resetUrl, userName)\n  \n  return await sendEmail({\n    to: email,\n    subject: 'Recuperar Contraseña - GRIFFE Platform',\n    html,\n    text,\n  })\n}\n\n// Enviar email de bienvenida\nexport async function sendWelcomeEmail(email: string, userName: string, loginUrl: string): Promise<boolean> {\n  const { html, text } = getWelcomeEmailTemplate(userName, loginUrl)\n  \n  return await sendEmail({\n    to: email,\n    subject: '¡Bienvenido a GRIFFE Platform!',\n    html,\n    text,\n  })\n}"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,2CAA2C;AAC3C,MAAM,cAAc,yMAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;IAC/B,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS,IAAI;IACxC,QAAQ;IACR,MAAM;QACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACjC;AACF;AAUO,eAAe,UAAU,OAAqB;IACnD,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,IAAI,CAAC,QAAQ,GAAG,CAAC,aAAa,EAAE;YACxD,QAAQ,IAAI,CAAC;YACb,OAAO;QACT;QAEA,MAAM,YAAY,QAAQ,CAAC;YACzB,MAAM,CAAC,mBAAmB,EAAE,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;YACpD,IAAI,QAAQ,EAAE;YACd,SAAS,QAAQ,OAAO;YACxB,MAAM,QAAQ,IAAI;YAClB,MAAM,QAAQ,IAAI;QACpB;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO;IACT;AACF;AAGO,SAAS,8BAA8B,QAAgB,EAAE,QAAiB;IAC/E,MAAM,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA+DR,EAAE,WAAW,CAAC,QAAQ,EAAE,SAAS,KAAK,CAAC,GAAG,eAAe;;;;;;;mBAO9C,EAAE,SAAS;;;;;;;;;;;;;wEAa0C,EAAE,SAAS;;;;;;;;;EASjF,CAAC;IAED,MAAM,OAAO,CAAC;;;IAGZ,EAAE,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,GAAG,QAAQ;;;;;IAK3C,EAAE,SAAS;;;;;;;;;;EAUb,CAAC;IAED,OAAO;QAAE;QAAM;IAAK;AACtB;AAGO,SAAS,wBAAwB,QAAgB,EAAE,QAAgB;IACxE,MAAM,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAwDA,EAAE,SAAS;;;;;;;mBAOR,EAAE,SAAS;;;;;;;;;;;;;EAa5B,CAAC;IAED,MAAM,OAAO,CAAC;;;SAGP,EAAE,SAAS;;;;;IAKhB,EAAE,SAAS;;;;;;;EAOb,CAAC;IAED,OAAO;QAAE;QAAM;IAAK;AACtB;AAGO,eAAe,uBAAuB,KAAa,EAAE,QAAgB,EAAE,QAAiB;IAC7F,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,8BAA8B,UAAU;IAE/D,OAAO,MAAM,UAAU;QACrB,IAAI;QACJ,SAAS;QACT;QACA;IACF;AACF;AAGO,eAAe,iBAAiB,KAAa,EAAE,QAAgB,EAAE,QAAgB;IACtF,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,wBAAwB,UAAU;IAEzD,OAAO,MAAM,UAAU;QACrB,IAAI;QACJ,SAAS;QACT;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 686, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport GoogleProvider from 'next-auth/providers/google'\nimport { prisma } from '@griffe/database'\nimport bcrypt from 'bcryptjs'\nimport { z } from 'zod'\nimport { generateAccessToken, generateRefreshToken, revokeAllRefreshTokens } from './jwt'\nimport { sendWelcomeEmail } from './email'\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n})\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        try {\n          const { email, password } = loginSchema.parse(credentials)\n          \n          const user = await prisma.user.findUnique({\n            where: { email },\n            include: { store: true }\n          })\n\n          if (!user || !user.password) {\n            return null\n          }\n\n          const isPasswordValid = await bcrypt.compare(password, user.password)\n          \n          if (!isPasswordValid) {\n            return null\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            storeId: user.storeId,\n            store: user.store\n          }\n        } catch (error) {\n          console.error('Auth error:', error)\n          return null\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    })\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 15 * 60, // 15 minutos para access token\n  },\n  jwt: {\n    maxAge: 15 * 60, // 15 minutos para access token\n  },\n  callbacks: {\n    async jwt({ token, user, account }) {\n      if (user && account) {\n        // Primera vez que el usuario se autentica\n        token.role = user.role\n        token.storeId = user.storeId\n        token.store = user.store\n        \n        // Generar access token y refresh token para el usuario\n        try {\n          const accessToken = generateAccessToken({\n            userId: user.id,\n            email: user.email || '',\n            role: user.role,\n            storeId: user.storeId\n          })\n          const refreshToken = await generateRefreshToken(user.id)\n          \n          token.accessToken = accessToken\n          token.refreshToken = refreshToken\n        } catch (error) {\n          console.error('Error generating tokens:', error)\n        }\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.sub!\n        session.user.role = token.role\n        session.user.storeId = token.storeId\n        session.user.store = token.store\n        session.accessToken = token.accessToken\n        session.refreshToken = token.refreshToken\n      }\n      return session\n    },\n    async signIn({ user, account, profile }) {\n      // Enviar email de bienvenida para nuevos usuarios de Google\n      if (account?.provider === 'google' && user.email) {\n        try {\n          const existingUser = await prisma.user.findUnique({\n            where: { email: user.email }\n          })\n          \n          if (!existingUser) {\n            // Nuevo usuario, enviar email de bienvenida\n            const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3002'\n            await sendWelcomeEmail(\n              user.email,\n              user.name || 'Usuario',\n              `${baseUrl}/auth/login`\n            )\n          }\n        } catch (error) {\n          console.error('Error sending welcome email:', error)\n        }\n      }\n      return true\n    },\n    async redirect({ url, baseUrl }) {\n      // Permite redirecciones relativas\n      if (url.startsWith('/')) return `${baseUrl}${url}`\n      // Permite redirecciones al mismo origen\n      else if (new URL(url).origin === baseUrl) return url\n      return baseUrl\n    }\n  },\n  pages: {\n    signIn: '/auth/login',\n    error: '/auth/error',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,4VAAA,CAAA,UAAQ,AAAD,EAAE,mIAAA,CAAA,cAAW","debugId":null}}]
}