{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/packages/database/index.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n\nexport * from '@prisma/client'"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,sOAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport { PrismaAdapter } from '@auth/prisma-adapter'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport GoogleProvider from 'next-auth/providers/google'\nimport { prisma } from '@griffe/database'\nimport bcrypt from 'bcryptjs'\nimport { z } from 'zod'\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n})\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        try {\n          const { email, password } = loginSchema.parse(credentials)\n          \n          const user = await prisma.user.findUnique({\n            where: { email },\n            include: { store: true }\n          })\n\n          if (!user || !user.password) {\n            return null\n          }\n\n          const isPasswordValid = await bcrypt.compare(password, user.password)\n          \n          if (!isPasswordValid) {\n            return null\n          }\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n            role: user.role,\n            storeId: user.storeId,\n            store: user.store\n          }\n        } catch (error) {\n          console.error('Auth error:', error)\n          return null\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    })\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  jwt: {\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role\n        token.storeId = user.storeId\n        token.store = user.store\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.sub!\n        session.user.role = token.role\n        session.user.storeId = token.storeId\n        session.user.store = token.store\n      }\n      return session\n    },\n    async redirect({ url, baseUrl }) {\n      // Permite redirecciones relativas\n      if (url.startsWith('/')) return `${baseUrl}${url}`\n      // Permite redirecciones al mismo origen\n      else if (new URL(url).origin === baseUrl) return url\n      return baseUrl\n    }\n  },\n  pages: {\n    signIn: '/auth/login',\n    error: '/auth/error',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;AAEA,MAAM,cAAc,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,OAAO,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,4RAAA,CAAA,gBAAa,AAAD,EAAE,+IAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,+WAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,YAAY,KAAK,CAAC;oBAE9C,MAAM,OAAO,MAAM,+IAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BAAE;wBAAM;wBACf,SAAS;4BAAE,OAAO;wBAAK;oBACzB;oBAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,OAAO;oBACT;oBAEA,MAAM,kBAAkB,MAAM,wLAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEpE,IAAI,CAAC,iBAAiB;wBACpB,OAAO;oBACT;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;wBACf,MAAM,KAAK,IAAI;wBACf,SAAS,KAAK,OAAO;wBACrB,OAAO,KAAK,KAAK;oBACnB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;QACA,CAAA,GAAA,0WAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,KAAK;QACH,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,OAAO,GAAG,KAAK,OAAO;gBAC5B,MAAM,KAAK,GAAG,KAAK,KAAK;YAC1B;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;gBACpC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,kCAAkC;YAClC,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;iBAE7C,IAAI,IAAI,IAAI,KAAK,MAAM,KAAK,SAAS,OAAO;YACjD,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///Users/mateotarazona/Downloads/Griffeaplica/griffe-platform/apps/web/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport { authOptions } from '@/lib/auth'\n\nconst handler = NextAuth(authOptions)\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,4VAAA,CAAA,UAAQ,AAAD,EAAE,mIAAA,CAAA,cAAW","debugId":null}}]
}